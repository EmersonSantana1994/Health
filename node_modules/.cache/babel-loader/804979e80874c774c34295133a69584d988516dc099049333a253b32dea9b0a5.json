{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\emers\\\\OneDrive\\\\Desktop\\\\projeto\\\\Front-Futebol\\\\src\\\\componentes\\\\login\\\\heal.js\\\\selectHealf.js\",\n  _s = $RefreshSig$();\n//IMPORTAÇÕES\nimport React, { useState, useEffect, useRef } from 'react'; /*eslint-disable*/\nimport { Button, Image, Form, InputGroup, FormControl, Col, Carousel, Alert } from 'react-bootstrap';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport { useNavigate } from 'react-router-dom';\n// ICONES\nimport { apiC } from \"../../../conexoes/api\";\nimport '../../../css/login/upload.css';\n\n/*  COMO USAR\r\n    Importe a modal para dentro do componente que irá fazer uso dela.\r\n    ex: import SelectCliente from '../../componentesModais/selects/selectCliente'\r\n\r\n    Crie um hook apropriado para esconder e exibir a mensagem quando necessário.\r\n    ex: const [revelarSelectCliente, setRevelarSelectCliente] = useState(false)\r\n\r\n    Após isso, posicione-a dentro do return do seu componente e passe os props para\r\n    customizar o conteúdo da mensagem da seguinte forma. É interessante utilizar um\r\n    <Button/> com uma função onClick, dentro de um >Form.Group/> para que o campo\r\n    se mantenha similar aos campos de texto normais.\r\n    ex: <Form.Group>\r\n            <Form.Label className=\"label\">\r\n                <div className=\"fonte-cabecalho\">cliente {iconeAsterisco}</div>\r\n            </Form.Label>\r\n            <Button name=\"cdCliente\" className=\"campo-select-modal\" onClick={() => setRevelarSelectCliente(!revelarSelectCliente)}>\r\n                <div className=\"campo-select-modal-label\">{dsCliente}</div>\r\n                <img className=\"campo-select-modal-icone\" src={setaDropdown()} alt=\"drop\" />\r\n            </Button>\r\n            { revelarSelectCliente === true &&\r\n                <SelectCliente\r\n                    setRevelarSelectCliente={setRevelarSelectCliente} //Hook para fechar a modal\r\n                    setCdCliente={setCdCliente} //Código do cliente\r\n                    setDsCliente={setDsCliente} //Nome do cliente\r\n                    phCliente={phCliente} //Placeholder para mostrar o valor original em caso de edição\r\n                >\r\n                </SelectCliente>\r\n            }\r\n        </Form.Group>*/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SelectHealf(props) {\n  _s();\n  const [grupos, setGrupos] = useState([]);\n  const [spinAtivo, setSpinAtivo] = useState(true);\n\n  //HOOKS MODAL\n  const modal = useRef();\n  const handleClickFora = e => {\n    if (!modal.current.contains(e.target)) {\n      handleCancelar();\n    }\n  };\n  function handleGrupos(codigo, grupo) {\n    props.setFiltroGrupo(codigo);\n    props.setCdGrupo(codigo);\n    handleCancelar();\n  }\n  function handleCancelar() {\n    props.setRevelarSelectGrupo(false);\n    props.setRevelarSelect1(false);\n  }\n  useEffect(() => {\n    props.setResetGrupo(false);\n    async function renderGrupos() {\n      let todosGrupos = [];\n      //carrega os 3 grupos padroes\n\n      // carrega o grupos do cliente\n      const data = await apiC.post(\"teste/select\");\n      await data.data.result.map((item, i) => {\n        todosGrupos.push(item);\n        return true;\n      });\n      if (todosGrupos.length > 0) {\n        let objetoGrupos = todosGrupos.map((item, i) => {\n          return /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"campo-select-opcao campo-select-opcao-1\",\n              onClick: () => handleGrupos(item.nome),\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"fonte-cor-1 fonte-campo campo-select-opcao-label\",\n                children: item.nome\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 84,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 29\n            }, this), todosGrupos[i + 1] !== undefined && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"campo-select-divisor-cor-1 campo-select-divisor\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 60\n            }, this)]\n          }, \"menu-\" + item.nome, true, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 25\n          }, this);\n        });\n        setGrupos(objetoGrupos);\n      } else {\n        let objetoGrupos = () => {\n          return /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              disabled: true,\n              className: \"campo-select-opcao campo-select-opcao-1\",\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"fonte-cor-1 fonte-campo campo-select-opcao-label nao-selecionavel\",\n                children: \"Nenhuma informa\\xE7\\xE3o encontrada\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 96,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 25\n          }, this);\n        };\n        setGrupos(objetoGrupos);\n      }\n    }\n    renderGrupos();\n    document.addEventListener('mousedown', handleClickFora);\n    return () => document.removeEventListener('mousedown', handleClickFora);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Form, {\n    ref: modal,\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      className: \"campo-texto-cor-3 campo-select\",\n      onClick: () => props.setRevelarSelectGrupo(false),\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"fonte-cor-1 campo-texto-select-tamanho-2\",\n        children: props.nomeGrupo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"campo-texto-cor-3 campo-select-corpo\",\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"campo-select-lista\",\n        children: grupos\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 9\n  }, this);\n}\n_s(SelectHealf, \"P0axfxvy/xjyWFpAnYORtcIwFtw=\");\n_c = SelectHealf;\nvar _c;\n$RefreshReg$(_c, \"SelectHealf\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Button","Image","Form","InputGroup","FormControl","Col","Carousel","Alert","BootstrapTable","useNavigate","apiC","jsxDEV","_jsxDEV","SelectHealf","props","_s","grupos","setGrupos","spinAtivo","setSpinAtivo","modal","handleClickFora","e","current","contains","target","handleCancelar","handleGrupos","codigo","grupo","setFiltroGrupo","setCdGrupo","setRevelarSelectGrupo","setRevelarSelect1","setResetGrupo","renderGrupos","todosGrupos","data","post","result","map","item","i","push","length","objetoGrupos","children","className","onClick","nome","fileName","_jsxFileName","lineNumber","columnNumber","undefined","disabled","document","addEventListener","removeEventListener","ref","nomeGrupo","_c","$RefreshReg$"],"sources":["C:/Users/emers/OneDrive/Desktop/projeto/Front-Futebol/src/componentes/login/heal.js/selectHealf.js"],"sourcesContent":["//IMPORTAÇÕES\r\nimport React, { useState, useEffect, useRef } from 'react';/*eslint-disable*/\r\nimport { Button, Image, Form, InputGroup, FormControl, Col, Carousel, Alert } from 'react-bootstrap';\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport { useNavigate } from 'react-router-dom';\r\n// ICONES\r\nimport { apiC } from \"../../../conexoes/api\";\r\nimport '../../../css/login/upload.css';\r\n\r\n/*  COMO USAR\r\n    Importe a modal para dentro do componente que irá fazer uso dela.\r\n    ex: import SelectCliente from '../../componentesModais/selects/selectCliente'\r\n\r\n    Crie um hook apropriado para esconder e exibir a mensagem quando necessário.\r\n    ex: const [revelarSelectCliente, setRevelarSelectCliente] = useState(false)\r\n\r\n    Após isso, posicione-a dentro do return do seu componente e passe os props para\r\n    customizar o conteúdo da mensagem da seguinte forma. É interessante utilizar um\r\n    <Button/> com uma função onClick, dentro de um >Form.Group/> para que o campo\r\n    se mantenha similar aos campos de texto normais.\r\n    ex: <Form.Group>\r\n            <Form.Label className=\"label\">\r\n                <div className=\"fonte-cabecalho\">cliente {iconeAsterisco}</div>\r\n            </Form.Label>\r\n            <Button name=\"cdCliente\" className=\"campo-select-modal\" onClick={() => setRevelarSelectCliente(!revelarSelectCliente)}>\r\n                <div className=\"campo-select-modal-label\">{dsCliente}</div>\r\n                <img className=\"campo-select-modal-icone\" src={setaDropdown()} alt=\"drop\" />\r\n            </Button>\r\n            { revelarSelectCliente === true &&\r\n                <SelectCliente\r\n                    setRevelarSelectCliente={setRevelarSelectCliente} //Hook para fechar a modal\r\n                    setCdCliente={setCdCliente} //Código do cliente\r\n                    setDsCliente={setDsCliente} //Nome do cliente\r\n                    phCliente={phCliente} //Placeholder para mostrar o valor original em caso de edição\r\n                >\r\n                </SelectCliente>\r\n            }\r\n        </Form.Group>*/\r\n\r\nexport default function SelectHealf(props) {\r\n    const [grupos, setGrupos] = useState([])\r\n    const [spinAtivo, setSpinAtivo] = useState(true);\r\n    \r\n    //HOOKS MODAL\r\n    const modal = useRef();\r\n\r\n    const handleClickFora = e => {\r\n        if (!modal.current.contains(e.target)) {\r\n            handleCancelar()\r\n        }\r\n    };\r\n\r\n    function handleGrupos(codigo, grupo){\r\n            props.setFiltroGrupo(codigo)\r\n            props.setCdGrupo(codigo)\r\n        handleCancelar()\r\n    }\r\n\r\n    function handleCancelar(){\r\n        props.setRevelarSelectGrupo(false)\r\n        props.setRevelarSelect1(false)\r\n    }\r\n\r\n    useEffect(() => {\r\n            props.setResetGrupo(false)\r\n    \r\n        async function renderGrupos(){\r\n            let todosGrupos = [];\r\n            //carrega os 3 grupos padroes\r\n         \r\n            \r\n            // carrega o grupos do cliente\r\n            const data = await apiC.post(\"teste/select\")\r\n            await data.data.result.map((item,i)=>{\r\n                todosGrupos.push(item);\r\n                return true\r\n            })\r\n\r\n            if(todosGrupos.length > 0){\r\n                let objetoGrupos = todosGrupos.map((item,i) => {\r\n                    return (\r\n                        <li key={\"menu-\"+item.nome}>\r\n                            <div className={\"campo-select-opcao campo-select-opcao-1\" } onClick={() => handleGrupos(item.nome) }>\r\n                                <span className=\"fonte-cor-1 fonte-campo campo-select-opcao-label\">{item.nome}</span>\r\n                            </div>\r\n                            {todosGrupos[i+1]!==undefined&&<div className=\"campo-select-divisor-cor-1 campo-select-divisor\"></div>}\r\n                        </li>\r\n                    );\r\n                })\r\n                setGrupos(objetoGrupos)\r\n            }else{\r\n                let objetoGrupos = () => {\r\n                    return (\r\n                        <li>\r\n                            <div disabled className={\"campo-select-opcao campo-select-opcao-1\" }>\r\n                                <span className=\"fonte-cor-1 fonte-campo campo-select-opcao-label nao-selecionavel\">Nenhuma informação encontrada</span>\r\n                            </div>\r\n                        </li>\r\n                    );\r\n                }\r\n                setGrupos(objetoGrupos)\r\n            }\r\n        }\r\n        renderGrupos()\r\n        document.addEventListener('mousedown', handleClickFora);\r\n        return () => document.removeEventListener('mousedown', handleClickFora);\r\n    }, [])\r\n\r\n\r\n    return(\r\n        <Form ref={modal}>\r\n            <Button className={\"campo-texto-cor-3 campo-select\"}onClick={() => props.setRevelarSelectGrupo(false)}>\r\n                <div className=\"fonte-cor-1 campo-texto-select-tamanho-2\">{props.nomeGrupo}</div>\r\n            </Button>\r\n            {/* <div className={\"campo-select-triangulo-cor-1 campo-select-triangulo\"}></div> */}\r\n            <div className={\"campo-texto-cor-3 campo-select-corpo\"}>\r\n                <ul className=\"campo-select-lista\">\r\n                    {grupos}\r\n                </ul>\r\n            </div>\r\n        </Form>\r\n    )\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}